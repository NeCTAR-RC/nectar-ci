- builder:
    name: run-tests
    builders:
      - shell: "./run_tests.sh"

- builder:
    name: rake-lint
    builders:
      - shell: |
          if [ -f Gemfile ]; then
            mkdir -p /tmp/rake-lint
            export GEM_HOME=/tmp/rake-lint
            bundle install
            bundle exec rake lint 2>&1
          else
            rake lint 2>&1
          fi

- builder:
    name: rake-test
    builders:
      - shell: |
          if [ -f Gemfile ]; then
            mkdir -p /tmp/rake-test
            export GEM_HOME=/tmp/rake-test
            bundle install
            bundle exec rake test 2>&1
          else
            rake test 2>&1
          fi

- builder:
    name: puppet-lint
    builders:
      - shell: |
          MODULE=$(basename `pwd` | sed 's/puppet-\(.*\)-puppet-unit/\1/')
          if [ -f Modulefile ]; then
            MODULE=$(awk '/^name/ {print $NF}' Modulefile |tr -d \"\')
            if [ -z "$MODULE" ]; then
              echo "Module name not defined in Modulefile"
            fi
          fi

          if [ -n "$MODULE" ]; then
            rm -rf $MODULE
            git clone . $MODULE
            cd "$MODULE"
          fi

          wget https://raw.githubusercontent.com/NeCTAR-RC/flake8-diff/master/lint.py
          chmod +x lint.py

          if [ -f Gemfile ]; then
            mkdir .bundled_gems
            export GEM_HOME=`pwd`/.bundled_gems
            bundle install
            bundle exec ./lint.py rake lint 2>&1
          else
            ./lint.py rake lint 2>&1
          fi

- builder:
    name: puppet-syntax
    builders:
      - shell: |
          MODULE=$(basename `pwd` | sed 's/puppet-\(.*\)-puppet-unit/\1/')
          cd "$MODULE"
          find . -iname *.pp -not -path "./.bundled_gems/*" | xargs puppet parser validate --modulepath=`pwd`/modules
          for f in `find . -iname *.erb -not -path "./.bundled_gems/*"` ; do
            erb -x -T '-' $f | ruby -c
          done

- builder:
    name: puppet-doc
    builders:
      - shell: |
          # Cleanup old docs.
          [ -d doc/ ] && rm -rf doc/
          ## Dummy manifests folder.
          ! [ -d manifests/ ] && mkdir manifests/
          ## Generate docs
          puppet doc --mode rdoc --manifestdir manifests/ --modulepath ./modules/ --outputdir doc
          ## Fix docs to how I want them, I don't like that the complete workspace is included in all file paths.
          if [ -d ${WORKSPACE}/doc/files/${WORKSPACE}/modules ]; then
            mv -v "${WORKSPACE}/doc/files/${WORKSPACE}/modules" "${WORKSPACE}/doc/files/modules"
          fi;
          grep -l -R ${WORKSPACE} * | while read fname; do sed -i "s@${WORKSPACE}/@/@g" $fname; done;

- builder:
    name: 'python-tox'
    builders:
      - shell: 'tox -e {environment}'

- builder:
    name: 'pbuilder-create'
    builders:
      - shell: 'hivemind pbuilder.create --os-release {os_release} || hivemind pbuilder.update --os-release {os_release}'

- builder:
    name: 'os-pbuilder-checkout'
    builders:
      - shell: |
          # Set up remote for github or internal, since we have no tags otherwise.
          git remote | grep 'alt-origin' > /dev/null && retval=0 || retval=1
          if [ $retval -ne 0 ]; then

            git remote -v | grep '29418/NeCTAR-RC' > /dev/null && retval=0 || retval=1
            if [ $retval -eq 0 ]; then
              URL=$(git remote -v | grep 29418 | sed 's/.*29418\/\(.*\) .*/\1/' | head -1)
              git remote add alt-origin https://github.com/$URL
            fi

            git remote -v | grep '29418/internal' > /dev/null && retval=0 || retval=1
            if [ $retval -eq 0 ]; then
              URL=$(git remote -v | grep 29418 | sed 's/.*29418\/\(.*\) .*/\1/' | head -1)
              git remote add alt-origin git@git.melbourne.nectar.org.au:$URL
            fi
          fi
          git fetch --tags alt-origin
          if [ ! -d debian ]; then
            for rb in `git branch -r --list | grep alt-origin | grep debian`
            do
              branch=`echo $rb | sed "s,alt-origin/,,g"`;
              git branch $branch alt-origin/$branch;
            done
          fi

          git branch -d $GERRIT_BRANCH || true
          git checkout -b $GERRIT_BRANCH origin/$GERRIT_BRANCH

- builder:
    name: 'pbuilder-buildpackage'
    builders:
      - shell: |
          export DEBFULLNAME="$GIT_AUTHOR_NAME"
          export DEBEMAIL="$GIT_AUTHOR_EMAIL"
          hivemind packaging.buildpackage --os-release {os_release}

- builder:
    name: 'pbuilder-buildpackage-no-upload'
    builders:
      - shell: |
          export DEBFULLNAME="$GIT_AUTHOR_NAME"
          export DEBEMAIL="$GIT_AUTHOR_EMAIL"
          hivemind packaging.buildpackage --os-release {os_release} --no-upload

- builder:
    name: 'os-pbuilder-create'
    builders:
      - shell: 'hivemind pbuilder.create || hivemind pbuilder.update'

- builder:
    name: 'os-pbuilder-buildpackage'
    builders:
      - shell: |
          export DEBFULLNAME="$GIT_AUTHOR_NAME"
          export DEBEMAIL="$GIT_AUTHOR_EMAIL"
          hivemind packaging.buildpackage

- builder:
    name: 'image-builder'
    builders:
      - shell: |
          #!/bin/bash -xe
          [ -d output-{job_name} ] && rm -fr output-{job_name}
          packer build -color=false -var-file=variables-nectar.json {job_name}.json
          cd output-{job_name}
          qemu-img convert -c -o compat=0.10 -O qcow2 {job_name} {job_name}.qcow2
          rm {job_name}
          set +x
          export OS_AUTH_URL=https://keystone.rc.nectar.org.au:5000/v2.0/
          export OS_TENANT_ID=28eadf5ad64b42a4929b2fb7df99275c
          export OS_TENANT_NAME=NeCTAR-Images
          export OS_NO_CACHE=True
          export OS_USERNAME=$(echo $KEYSTONE_CREDS | cut -f1 -d:)
          export OS_PASSWORD=$(echo $KEYSTONE_CREDS | cut -f2 -d:)
          set -x
          IMAGE_ID=$(openstack image create -f value -c id --disk-format qcow2 --container-format bare --file {job_name}.qcow2 --property architecture="{architecture}" --property os_distro="{os_distro}" --property os_version="{os_version}" --property nectar_build=$BUILD_NUMBER --property nectar_name="{image_name}" "NeCTAR {image_name}")
          [[ "{job_name}" =~ "murano" ]] && glance image-update --property murano_image_info='{{"title": "NeCTAR {image_name}", "type": "linux"}}' $IMAGE_ID
          set +e
          INSTANCE_ID=$(openstack server create -f value -c id --image $IMAGE_ID --flavor m1.small --key-name jenkins-image-testing "test_{job_name}_$BUILD_NUMBER")
          i=0
          while [ $i -le 10 ]; do
              STATUS=$(openstack server show -f value -c status $INSTANCE_ID)
              [ "$STATUS" = "ACTIVE" ] && break
              if [ $i -ge 10 ] || [ "$STATUS" = "ERROR" ]; then
                  openstack server delete $INSTANCE_ID; exit 1
              fi
              i=$((i+1))
              sleep 30
          done
          IP_ADDRESS=$(openstack server show -f value -c accessIPv4 $INSTANCE_ID)
          chmod 600 $SSH_TESTING_KEY
          j=0
          while [ $j -le 20 ]; do
              ssh -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null -i $SSH_TESTING_KEY {default_user}@$IP_ADDRESS exit && break
              if [ $j -ge 20 ]; then
                  openstack server delete $INSTANCE_ID; exit 1
              fi
              j=$((j+1))
              sleep 30
          done
          ssh -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null -i $SSH_TESTING_KEY {default_user}@$IP_ADDRESS 'sleep 120; /bin/bash /usr/nectar/run_tests.sh'
          EXIT_CODE=$?
          set +x
          if [ $EXIT_CODE -eq 0 ]; then
              echo "================================================================================"
              echo ""
              echo "  NeCTAR {image_name} v$BUILD_NUMBER build successful!"
              echo ""
              echo "  To promote this image to PROD:"
              echo "    $ hivemind glance.promote $IMAGE_ID"
              echo ""
              echo "================================================================================"
          fi
          set -x
          openstack server delete $INSTANCE_ID
          exit $EXIT_CODE
- builder:
    name: 'image-builder-openstack'
    builders:
      - shell: |
          #!/bin/bash -xe
          [ -d output-{job_name} ] && rm -fr output-{job_name}
          set +x
          export OS_AUTH_URL=https://keystone.rc.nectar.org.au:5000/v3.0/
          export OS_USERNAME=$(echo $KEYSTONE_CREDS | cut -f1 -d:)
          export OS_PASSWORD=$(echo $KEYSTONE_CREDS | cut -f2 -d:)
          export OS_TENANT_ID=28eadf5ad64b42a4929b2fb7df99275c
          export OS_DOMAIN_NAME=Default
          export OS_NO_CACHE=True
          set -x
          OUTFILE=$(mktemp)
          packer build -color=false -var-file=variables-nectar.json {job_name}.json -machine-readable | tee ${OUTFILE}
          IMAGE_ID=$(tail -n5 < ${OUTFILE} | head -n1 | cut -d ',' -f6 )
          set +e
          INSTANCE_ID=$(openstack server create -f value -c id --image $IMAGE_ID --flavor m1.small --key-name jenkins-image-testing "test_{job_name}_$BUILD_NUMBER")
          i=0
          while [ $i -le 10 ]; do
              STATUS=$(openstack server show -f value -c status $INSTANCE_ID)
              [ "$STATUS" = "ACTIVE" ] && break
              if [ $i -ge 10 ] || [ "$STATUS" = "ERROR" ]; then
                  openstack server delete $INSTANCE_ID; exit 1
              fi
              i=$((i+1))
              sleep 30
          done
          IP_ADDRESS=$(openstack server show -f value -c accessIPv4 $INSTANCE_ID)
          chmod 600 $SSH_TESTING_KEY
          j=0
          while [ $j -le 20 ]; do
              ssh -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null -i $SSH_TESTING_KEY {default_user}@$IP_ADDRESS exit && break
              if [ $j -ge 20 ]; then
                  openstack server delete $INSTANCE_ID; exit 1
              fi
              j=$((j+1))
              sleep 30
          done
          ssh -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null -i $SSH_TESTING_KEY {default_user}@$IP_ADDRESS 'sleep 120; /bin/bash /usr/nectar/run_tests.sh'
          EXIT_CODE=$?
          set +x
          if [ $EXIT_CODE -eq 0 ]; then
              echo "================================================================================"
              echo ""
              echo "  NeCTAR {image_name} v$BUILD_NUMBER build successful!"
              echo ""
              echo "  To promote this image to PROD:"
              echo "    $ hivemind glance.promote $IMAGE_ID"
              echo ""
              echo "================================================================================"
          fi
          set -x
          openstack server delete $INSTANCE_ID
          exit $EXIT_CODE

- builder:
    name: 'image-builder-rctest'
    builders:
      - shell: |
          [ -d output-{job_name} ] && rm -fr output-{job_name}
          packer build -color=false -var-file=variables-nectar.json {job_name}.json
          cd output-{job_name}
          qemu-img convert -c -o compat=0.10 -O qcow2 {job_name} {job_name}.qcow2
          rm {job_name}
          set +x
          export OS_AUTH_URL=https://keystone.test.rc.nectar.org.au:5000/v2.0/
          export OS_TENANT_ID=704fdb05a2f645ac8dbf4fb1222bf267
          export OS_TENANT_NAME=nectar-ci
          export OS_USERNAME=$(echo $KEYSTONE_CREDS | cut -f1 -d:)
          export OS_PASSWORD=$(echo $KEYSTONE_CREDS | cut -f2 -d:)
          export OS_NO_CACHE=True

          IMAGE_ID=$(glance --os-image-api-version=1 image-create --disk-format qcow2 --container-format bare --name "{image_name}-v$BUILD_NUMBER" --file "{job_name}.qcow2" | grep " id " |  cut -d '|' -f3 | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//');

          echo "================================================================================"
          echo ""
          echo "  NeCTAR {image_name} v$BUILD_NUMBER build successful!"
          echo ""
          echo "  To use this new image in Jenkins, go to:"
          echo "      https://jenkins.rc.nectar.org.au/configure"
          echo ""
          echo "  and set the 'Cloud Instance Templates Image ID' value to:"
          echo "      Melbourne/$IMAGE_ID"
          echo ""
          echo "================================================================================"

- builder:
    name: yaml-lint
    builders:
      - shell: |
          mkdir -p /tmp/yamls
          export GEM_HOME=/tmp/yamls
          gem install --no-ri --no-rdoc yaml-lint
          find . -type f -iname "*.yaml" -o -iname "*.eyaml" | xargs /tmp/yamls/bin/yaml-lint

- builder:
    name: 'dummy'
    builders:
      - shell: 'exit 0'

- builder:
    name: markdown-lint
    builders:
      - shell: |
          mkdir -p /tmp/vendor
          export GEM_HOME=/tmp/vendor
          cat > /tmp/vendor/md_style.rb << EOF
          all
          exclude_tag :whitespace
          exclude_tag :line_length
          exclude_rule 'MD002' # First header should be a h1 header
          exclude_rule 'MD006' # Lists at beginning of line
          exclude_rule 'MD007' # List indentation
          exclude_rule 'MD014' # Dollar signs used before commands without showing output
          exclude_rule 'MD033' # Inline HTML
          exclude_rule 'MD034' # Bare URL used
          exclude_rule 'MD040' # Fenced code blocks should have a language specified
          EOF
          gem install mdl
          git diff --name-status HEAD~1 | grep '^[^D].*\.md' | cut -f2- | xargs -I filename /tmp/vendor/bin/mdl -s /tmp/vendor/md_style.rb "filename"

- builder:
    name: nodejs-test
    builders:
      - shell: |
          npm install
          npm test

- builder:
    name: jekyll-deploy
    builders:
      - shell: |
          mkdir -p /tmp/jekyll-vendor
          export GEM_HOME=/tmp/jekyll-vendor
          bundle install
          bundle exec jekyll build
          GH_USERNAME=`echo $GITHUB_CREDS | cut -f1 -d:`
          GH_PASSWORD=`echo $GITHUB_CREDS | cut -f2 -d:`

          rm -rf /tmp/_site
          mv _site /tmp/
          git remote add github https://$GH_USERNAME:$GH_PASSWORD@github.com/NeCTAR-RC/nectar-training.git
          git symbolic-ref HEAD refs/heads/gh-pages
          rm .git/index
          git clean -fdx
          mv /tmp/_site/* .
          git add --all
          git config --global user.email "jenkins@rc.nectar.org.au"
          git config --global user.name "Jenkins"
          git commit -m "Auto upload"
          git push --force github gh-pages

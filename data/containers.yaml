- project:
    name: containers
    jobs:
      - '{name}-yaml':
          organisation: 'internal'
- project:
    name: docker-shibd
    jobs:
      - '{name}-container':
          organisation: 'internal'
- project:
    name: argocd-apps-test
    jobs:
      - '{name}-yaml':
          organisation: 'internal'
      - '{name}-argocd-diff':
          organisation: 'internal'
- project:
    name: argocd-apps-prod
    jobs:
      - '{name}-yaml':
          organisation: 'internal'
      - '{name}-argocd-diff':
          organisation: 'internal'
- job-group:
    name: '{name}-kolla-container'
    jobs:
      - '{name}-kolla-container-{os_release}':
          os_release: 'xena'
      - '{name}-kolla-container-{os_release}':
          os_release: 'yoga'
      - '{name}-kolla-container-{os_release}':
          os_release: 'zed'
      - '{name}-kolla-container-{os_release}':
          os_release: '2023.1'
      - '{name}-kolla-container-{os_release}':
          os_release: '2023.2'
      - '{name}-kolla-container-{os_release}':
          os_release: '2024.1'
- job-group:
    name: '{name}-kolla-container-upstream'
    jobs:
      - '{name}-kolla-container-upstream-{os_release}':
          os_release: 'xena'
      - '{name}-kolla-container-upstream-{os_release}':
          os_release: 'yoga'
      - '{name}-kolla-container-upstream-{os_release}':
          os_release: 'zed'
      - '{name}-kolla-container-upstream-{os_release}':
          os_release: '2023.1'
      - '{name}-kolla-container-upstream-{os_release}':
          os_release: '2023.2'
      - '{name}-kolla-container-upstream-{os_release}':
          os_release: '2024.1'
# Iscsi build needs special job as we just tag on openstack version
- job-group:
    name: 'iscsid-kolla-container-upstream'
    jobs:
      - 'iscsid-kolla-container-{os_release}':
          os_release: '2023.1'
      - 'iscsid-kolla-container-{os_release}':
          os_release: '2023.2'
      - 'iscsid-kolla-container-{os_release}':
          os_release: '2024.1'
- job-template:
    name: 'dashboard-kolla-container'
    defaults: global
    project-type: pipeline
    sandbox: true
    concurrent: false
    parameters:
      - string:
          name: GERRIT_REFSPEC
          default: refs/heads/nectar/wallaby
          description: "The ref to use."
      - string:
          name: GERRIT_BRANCH
          default: nectar/wallaby
          description: "The branch to use."
    triggers:
      - gerrit:
          trigger-on:
            - change-merged-event
          projects:
            - project-compare-type: 'PLAIN'
              project-pattern: 'NeCTAR-RC/horizon'
              branches:
                - branch-compare-type: 'REG_EXP'
                  branch-pattern: 'nectar/.*'
            - project-compare-type: 'REG_EXP'
              project-pattern: 'NeCTAR-RC/.*-dashboard'
              branches:
                - branch-compare-type: 'REG_EXP'
                  branch-pattern: 'nectar/.*'
            - project-compare-type: 'REG_EXP'
              project-pattern: 'NeCTAR-RC/.*-ui'
              branches:
                - branch-compare-type: 'REG_EXP'
                  branch-pattern: 'nectar/.*'
          silent: false
          escape-quotes: true
    publishers: !include: publisher.yaml.inc
    dsl: |
      pipeline {{
        agent {{ label 'docker' }}
        stages {{
          stage('Clone') {{
            steps {{
            git poll: false,
                url: 'ssh://jenkins@review.rc.nectar.org.au:29418/internal/nectar-kolla.git',
                credentialsId: 'cd8b8dd3-b897-4ecb-985d-180d5b6f8498',
                branch: '$GERRIT_BRANCH'
            }}
          }}
          stage('Build') {{
            environment {{
              REGISTRY = credentials('registry-nectar')
              REGISTRY_HOST = "registry.rc.nectar.org.au"
            }}
            steps {{
              script {{
                env.OPENSTACK_RELEASE = sh(script: "echo ${{env.GERRIT_BRANCH}} | awk -F '/' '{{ print \$2 }}'",
                                           returnStdout: true).trim()
                env.TAG = "${{env.OPENSTACK_RELEASE}}-${{env.BUILD_NUMBER}}"
              }}
              kollaBuild 'dashboard', "${{env.TAG}}"
            }}
          }}
          stage('Helm package') {{
            steps {{
              build job: 'nectar-dashboard-helm-helm-update-version', parameters: [string(name: 'IMAGE_TAG', value: "${{env.TAG}}"),string(name: 'CHANGE_PROJECT', value: "${{env.GERRIT_PROJECT}}"),string(name: 'CHANGE_MESSAGE', value: "${{env.GERRIT_CHANGE_SUBJECT}}"),string(name: 'BRANCH', value: "${{env.GERRIT_BRANCH}}")]
            }}
          }}
        }}
      }}
- job-template:
    name: 'requirements-kolla-container-{os_release}'
    defaults: global
    project-type: pipeline
    sandbox: true
    properties:
      - copyartifact:
          projects: '*-kolla-container-*'
    dsl: |
      pipeline {{
        agent {{ label 'docker' }}
        options {{
            copyArtifactPermission('*-kolla-container-*')
        }}
        stages {{
          stage('Clone') {{
            steps {{
              git poll: false,
                url: 'ssh://jenkins@review.rc.nectar.org.au:29418/internal/nectar-kolla.git',
                credentialsId: 'cd8b8dd3-b897-4ecb-985d-180d5b6f8498',
                branch: 'nectar/{os_release}'
            }}
          }}
          stage('Build') {{
            environment {{
              REGISTRY = credentials('registry-nectar')
            }}
            steps {{
              sh '''
                export REGISTRY="registry.rc.nectar.org.au"
                export REGISTRY_AUTH_FILE=auth.json
                echo "$REGISTRY_PSW" | docker login -u "$REGISTRY_USR" --password-stdin "$REGISTRY"

                virtualenv kolla
                . kolla/bin/activate
                pip install -r requirements.txt

                docker image prune --all -f

                kolla-build --config-file etc/kolla-build.conf --profile requirements --pull --tag {os_release} --registry $REGISTRY --push
                mkdir -p artifacts
                echo "$BUILD_NUMBER" > artifacts/BUILD_NUMBER
              '''
              archiveArtifacts artifacts: 'artifacts/*', fingerprint: true
            }}
          }}
        }}
      }}
- job-template:
    name: '{name}-kolla-container-{os_release}'
    defaults: global
    project-type: pipeline
    sandbox: true
    kolla_profile_name: 'false'
    parameters:
      - string:
          name: GERRIT_REFSPEC
          default: refs/heads/nectar/{os_release}
          description: "The ref to use."
      - string:
          name: GERRIT_BRANCH
          default: nectar/{os_release}
          description: "The kolla branch to use."
      - string:
          name: PROJECT_BRANCH_OVERRIDE
          description: "If project branch is not the same as gerrit branch you can override this here. Leave blank if project follows standard nectar/openstack_version pattern."
    triggers:
      - gerrit:
          trigger-on:
            - change-merged-event
          projects:
            - project-compare-type: 'PLAIN'
              project-pattern: '{organisation}/{name}'
              branches:
                - branch-compare-type: 'REG_EXP'
                  branch-pattern: 'nectar/{os_release}'
          silent: false
          escape-quotes: true
      - reverse:
          jobs:
            - 'requirements-kolla-container-{os_release}'
    publishers: !include: publisher.yaml.inc
    dsl: |
      def copyArtifactSelector = upstream()
      pipeline {{
        agent {{ label 'docker' }}
        stages {{
          stage('Get artifacts') {{
            steps {{
              script {{
                if (currentBuild.upstreamBuilds.size() == 0) {{
                  build = selectRun(
                    job: 'requirements-kolla-container-{os_release}',
                    selector: status('SUCCESSFUL'),
                    verbose: true
                  )
                  copyArtifactSelector = specific(build.getId())
                }}
                copyArtifacts(
                  projectName: 'requirements-kolla-container-{os_release}',
                  selector: copyArtifactSelector,
                  fingerprintArtifacts: true,
                )
              }}
            }}
          }}
          stage('Clone') {{
            environment {{
              PROJECT_BRANCH = "${{sh(script:'[ -z $PROJECT_BRANCH_OVERRIDE ] && echo $GERRIT_BRANCH || echo $PROJECT_BRANCH_OVERRIDE', returnStdout: true).trim()}}"
            }}
            steps {{
              git poll: false,
                  url: 'ssh://jenkins@review.rc.nectar.org.au:29418/internal/nectar-kolla.git',
                  credentialsId: 'cd8b8dd3-b897-4ecb-985d-180d5b6f8498',
                  branch: '$GERRIT_BRANCH'
              dir ('{name}') {{
                git poll: false,
                    url: 'ssh://jenkins@review.rc.nectar.org.au:29418/{organisation}/{name}.git',
                    credentialsId: 'cd8b8dd3-b897-4ecb-985d-180d5b6f8498',
                    branch: "${{env.PROJECT_BRANCH}}"
              }}
            }}
          }}
          stage('Build') {{
            environment {{
              REGISTRY = credentials('registry-nectar')
            }}
            steps {{
              copyArtifacts(
                projectName: 'requirements-kolla-container-{os_release}',
                selector: copyArtifactSelector,
                fingerprintArtifacts: true,
              )
              sshagent (credentials: ['cd8b8dd3-b897-4ecb-985d-180d5b6f8498']) {{
                sh '''
                  #!/bin/bash
                  set -eux -o pipefail
                  cd {name}
                  export VERSION_TAG=`git describe`
                  cd ..
                  export BASE_BUILD_NUMBER=`cat artifacts/BUILD_NUMBER`
                  export REGISTRY="registry.rc.nectar.org.au"
                  export REGISTRY_AUTH_FILE=auth.json
                  echo "$REGISTRY_PSW" | docker login -u "$REGISTRY_USR" --password-stdin "$REGISTRY"
                  OPENSTACK_RELEASE=`echo $GERRIT_BRANCH | awk -F '/' '{{ print $2 }}'`
                  virtualenv kolla
                  . kolla/bin/activate
                  pip install -r requirements.txt

                  docker image prune --all -f
                  docker image ls

                  docker pull registry.rc.nectar.org.au/kolla/ubuntu-source-base:$OPENSTACK_RELEASE
                  docker pull registry.rc.nectar.org.au/kolla/ubuntu-source-openstack-base:$OPENSTACK_RELEASE

                  # in rare cases, kolla profile name is not equal to project name, so we can override the profile name.
                  [[ {kolla_profile_name} == 'false' ]] && PROFILE_NAME={name} || PROFILE_NAME={kolla_profile_name}
                  kolla-build --config-file etc/kolla-build.conf --profile $PROFILE_NAME --skip-existing --tag $OPENSTACK_RELEASE --registry $REGISTRY --push

                  VERSION_TAG=$VERSION_TAG-$BASE_BUILD_NUMBER-$BUILD_NUMBER

                  for image in `kolla-build --list-images --profile $PROFILE_NAME --config-file etc/kolla-build.conf | awk '{{print $3}}' | egrep -v '^(base|openstack-base)$'`
                  do
                      docker tag ${{REGISTRY}}/kolla/ubuntu-source-${{image}}:${{OPENSTACK_RELEASE}} ${{REGISTRY}}/kolla/ubuntu-source-${{image}}:${{VERSION_TAG}}
                      docker push ${{REGISTRY}}/kolla/ubuntu-source-${{image}}:${{VERSION_TAG}}
                  done
                '''
              }}
            }}
          }}
        }}
      }}
- job-template:
    name: '{name}-kolla-container-upstream-{os_release}'
    defaults: global
    project-type: pipeline
    sandbox: true
    triggers:
      - reverse:
          jobs:
            - 'requirements-kolla-container-{os_release}'
    dsl: |
      def copyArtifactSelector = upstream()
      pipeline {{
        agent {{ label 'docker' }}
        stages {{
          stage('Get artifacts') {{
            steps {{
              script {{
                if (currentBuild.upstreamBuilds.size() == 0) {{
                  build = selectRun(
                    job: 'requirements-kolla-container-{os_release}',
                    selector: status('SUCCESSFUL'),
                    verbose: true
                  )
                  copyArtifactSelector = specific(build.getId())
                }}
                copyArtifacts(
                  projectName: 'requirements-kolla-container-{os_release}',
                  selector: copyArtifactSelector,
                  fingerprintArtifacts: true,
                )
              }}
            }}
          }}
          stage('Clone') {{
            steps {{
              git poll: false,
                url: 'ssh://jenkins@review.rc.nectar.org.au:29418/internal/nectar-kolla.git',
                credentialsId: 'cd8b8dd3-b897-4ecb-985d-180d5b6f8498',
                branch: 'nectar/{os_release}'
              dir ('{name}') {{
                git poll: false,
                    url: 'https://github.com/openstack/{name}',
                    branch: 'stable/{os_release}'
              }}
            }}
          }}
          stage('Build') {{
            environment {{
              REGISTRY = credentials('registry-nectar')
            }}
            steps {{
              copyArtifacts(
                projectName: 'requirements-kolla-container-{os_release}',
                selector: copyArtifactSelector,
                fingerprintArtifacts: true,
              )
              sh '''
                cd {name}
                export VERSION_TAG=`git describe`
                cd ..
                export BASE_BUILD_NUMBER=`cat artifacts/BUILD_NUMBER`
                export REGISTRY="registry.rc.nectar.org.au"
                export REGISTRY_AUTH_FILE=auth.json
                echo "$REGISTRY_PSW" | docker login -u "$REGISTRY_USR" --password-stdin "$REGISTRY"
                virtualenv kolla
                . kolla/bin/activate
                pip install -r requirements.txt

                docker image prune --all -f

                docker pull ${{REGISTRY}}/kolla/ubuntu-source-base:{os_release}
                docker pull ${{REGISTRY}}/kolla/ubuntu-source-openstack-base:{os_release}

                kolla-build --config-file etc/kolla-build.conf --profile {name} --skip-existing --tag {os_release} --registry $REGISTRY --push

                VERSION_TAG=$VERSION_TAG-$BASE_BUILD_NUMBER-$BUILD_NUMBER


                for image in `kolla-build --list-images --profile {name} --config-file etc/kolla-build.conf | awk '{{print $3}}' | egrep -v '^(base|openstack-base)$'`
                do
                    docker tag ${{REGISTRY}}/kolla/ubuntu-source-${{image}}:{os_release} ${{REGISTRY}}/kolla/ubuntu-source-${{image}}:${{VERSION_TAG}}
                    docker push ${{REGISTRY}}/kolla/ubuntu-source-${{image}}:${{VERSION_TAG}}
                done

              '''
            }}
          }}
        }}
      }}
- job-template:
    name: 'iscsid-kolla-container-{os_release}'
    defaults: global
    project-type: pipeline
    sandbox: true
    triggers:
      - reverse:
          jobs:
            - 'requirements-kolla-container-{os_release}'
    dsl: |
      def copyArtifactSelector = upstream()
      pipeline {{
        agent {{ label 'docker' }}
        stages {{
          stage('Get artifacts') {{
            steps {{
              script {{
                if (currentBuild.upstreamBuilds.size() == 0) {{
                  build = selectRun(
                    job: 'requirements-kolla-container-{os_release}',
                    selector: status('SUCCESSFUL'),
                    verbose: true
                  )
                  copyArtifactSelector = specific(build.getId())
                }}
                copyArtifacts(
                  projectName: 'requirements-kolla-container-{os_release}',
                  selector: copyArtifactSelector,
                  fingerprintArtifacts: true,
                )
              }}
            }}
          }}
          stage('Clone') {{
            steps {{
              git poll: false,
                url: 'ssh://jenkins@review.rc.nectar.org.au:29418/internal/nectar-kolla.git',
                credentialsId: 'cd8b8dd3-b897-4ecb-985d-180d5b6f8498',
                branch: 'nectar/{os_release}'
            }}
          }}
          stage('Build') {{
            environment {{
              REGISTRY = credentials('registry-nectar')
            }}
            steps {{
              copyArtifacts(
                projectName: 'requirements-kolla-container-{os_release}',
                selector: copyArtifactSelector,
                fingerprintArtifacts: true,
              )
              sh '''
                export BASE_BUILD_NUMBER=`cat artifacts/BUILD_NUMBER`
                export REGISTRY="registry.rc.nectar.org.au"
                export REGISTRY_AUTH_FILE=auth.json
                echo "$REGISTRY_PSW" | docker login -u "$REGISTRY_USR" --password-stdin "$REGISTRY"
                virtualenv kolla
                . kolla/bin/activate
                pip install -r requirements.txt

                docker image prune --all -f

                docker pull ${{REGISTRY}}/kolla/ubuntu-source-base:{os_release}
                docker pull ${{REGISTRY}}/kolla/ubuntu-source-openstack-base:{os_release}

                kolla-build --config-file etc/kolla-build.conf --profile iscsi --skip-existing --tag {os_release} --registry $REGISTRY --push

                VERSION_TAG={os_release}-$BASE_BUILD_NUMBER

                for image in `kolla-build --list-images --profile iscsi --config-file etc/kolla-build.conf | awk '{{print $3}}' | egrep -v '^(base|openstack-base)$'`
                do
                    docker tag ${{REGISTRY}}/kolla/ubuntu-source-${{image}}:{os_release} ${{REGISTRY}}/kolla/ubuntu-source-${{image}}:${{VERSION_TAG}}
                    docker push ${{REGISTRY}}/kolla/ubuntu-source-${{image}}:${{VERSION_TAG}}
                done

              '''
            }}
          }}
        }}
      }}
- job-template:
    name: '{name}-helm-update-version'
    defaults: global
    project-type: pipeline
    sandbox: true
    concurrent: false
    parameters:
      - string:
          name: IMAGE_TAG
          description: "New image tag for version"
      - string:
          name: CHANGE_MESSAGE
          description: "Commit change message"
      - string:
          name: CHANGE_PROJECT
          description: "Project which initiated the this version update"
      - string:
          name: BRANCH
          default: master
          description: "Branch of helm chart repo"
    dsl: |
      pipeline {{
        agent {{ label 'internal' }}
        stages {{
          stage('Clone') {{
            steps {{
              git poll: false,
                  url: 'https://jenkins@review.rc.nectar.org.au/a/{organisation}/{name}',
                  credentialsId: '2f00f9a5-00c3-42fe-82bf-cc787af1df8c',
                  branch: '$BRANCH'
            }}
          }}
          stage('Build') {{
            steps {{
              script {{
                def chart = readYaml file: 'Chart.yaml'
                def split = chart.version.split('\\.')
                split[2] = Integer.parseInt(split[2]) + 1
                chart.version = split.join('.')
                chart.appVersion = "$IMAGE_TAG"
                def new_chart = writeYaml file: 'Chart.yaml',  data: chart, overwrite:true
              }}
              sh '''
              cat Chart.yaml
              git config user.name 'Jenkins'
              git config user.email 'jenkins@rc.nectar.org.au'
              git add Chart.yaml && git commit -a -m "[Jenkins CI] New appVersion: \$IMAGE_TAG" -m "Project: \$CHANGE_PROJECT" -m "\$CHANGE_MESSAGE"
              '''
            }}
          }}
          stage("Push") {{
            environment {{
              GIT_AUTH = credentials('2f00f9a5-00c3-42fe-82bf-cc787af1df8c')
            }}
            steps {{
              sh('''
                 git show -q
                 git config --local credential.helper "!f() {{ echo username=\\$GIT_AUTH_USR; echo password=\\$GIT_AUTH_PSW; }}; f"
                 git push origin HEAD:refs/heads/\$BRANCH
                 git config --local --unset credential.helper
              ''')
            }}
          }}
          stage("Package") {{
              steps {{
                build job: '{name}-helm-package', parameters: [string(name: 'GERRIT_REFSPEC', value: "refs/heads/${{env.BRANCH}}"),string(name: 'GERRIT_BRANCH', value: "${{env.BRANCH}}")]
              }}
          }}
        }}
        post {{
          cleanup {{
            node('internal') {{
              deleteDir() /* clean up our workspace */
            }}
          }}
        }}
      }}
- job-template:
    name: '{name}-container'
    defaults: global
    project-type: pipeline
    sandbox: true
    helm_name: ''
    concurrent: false
    parameters:
      - string:
          name: GERRIT_REFSPEC
          default: refs/heads/master
          description: "The ref to use."
      - string:
          name: GERRIT_BRANCH
          default: master
          description: "The branch to use."
    triggers:
      - gerrit:
          trigger-on:
            - change-merged-event
            - patchset-created-event
            - comment-added-contains-event:
                comment-contains-value: 'recheck'
          projects:
            - project-compare-type: 'PLAIN'
              project-pattern: '{organisation}/{name}'
              branches:
                - branch-compare-type: 'REG_EXP'
                  branch-pattern: 'nectar/.*'
                - branch-compare-type: 'PLAIN'
                  branch-pattern: 'master'
          silent: false
          escape-quotes: true
    dsl: |
      pipeline {{
        agent {{ label 'docker' }}
        environment {{
          TAG = "${{env.GERRIT_EVENT_TYPE != "change-merged" ? "review-" + env.GERRIT_CHANGE_NUMBER + "-" + env.GERRIT_PATCHSET_NUMBER: "" }}"
        }}
        stages {{
          stage('Clone') {{
            steps {{
                checkout(
                  poll: false,
                  scm: [
                    $class: 'GitSCM',
                    branches: [[name: 'origin/$GERRIT_BRANCH']],
                    extensions: [
                      [$class: 'CloneOption', honorRefspec: true],
                      [$class: 'CleanCheckout'],
                      [$class: 'BuildChooserSetting', buildChooser: [$class: 'GerritTriggerBuildChooser']]
                    ],
                    userRemoteConfigs: [[
                      credentialsId: 'cd8b8dd3-b897-4ecb-985d-180d5b6f8498',
                      name: 'origin',
                      refspec: '$GERRIT_REFSPEC',
                      url: 'ssh://jenkins@review.rc.nectar.org.au:29418/{organisation}/{name}.git'
                    ]]
                  ]
                )
            }}
          }}

          stage('Build') {{
            steps {{
                sh '''
                make build BUILDER=docker TAG=$TAG
                '''
            }}
          }}
          stage('Push') {{
            environment {{
              REGISTRY = credentials('registry-nectar')
            }}
            steps {{
                sh '''
                export REGISTRY="registry.rc.nectar.org.au"
                export REGISTRY_AUTH_FILE=auth.json
                echo "$REGISTRY_PSW" | docker login -u "$REGISTRY_USR" --password-stdin "$REGISTRY"

                make push BUILDER=docker TAG=$TAG

                rm -f auth.json
                '''
            }}
          }}
          stage('Helm package update') {{
            when {{
                expression {{
                  return '{helm_name}' != '' && env.GERRIT_EVENT_TYPE == 'change-merged'
                }}
            }}
            steps {{
                script {{
                  env.IMAGE_TAG = sh(script: "git describe --tags --always", returnStdout: true).trim()
                }}
                build job: '{helm_name}-helm-update-version', parameters: [string(name: 'IMAGE_TAG', value: "${{env.IMAGE_TAG}}"),string(name: 'CHANGE_PROJECT', value: "${{env.GERRIT_PROJECT}}"),string(name: 'CHANGE_MESSAGE', value: "${{env.GERRIT_CHANGE_SUBJECT}}")]
            }}
          }}
        }}
      }}
- job:
    name: 'renovate-testing-env'
    defaults: global
    project-type: pipeline
    sandbox: true
    concurrent: false
    triggers:
      - timed: "0 10 * * 1-5"
    dsl: |
      pipeline {
        agent {
          docker {
            image 'registry.rc.nectar.org.au/docker.io/renovate/renovate'
            reuseNode true
            args '--group-add root'
          }
        }
        stages {
          stage('Run renovate') {
            steps {
              withCredentials([file(credentialsId: '42898081-d846-4a3f-a41e-515eb74132e2', variable: 'FILE')]) {
                sh '''
                  cp $FILE $FILE.json
                  RENOVATE_CONFIG_FILE=$FILE.json renovate
                  '''
              }
            }
          }
        }
      }
- job:
    name: 'renovate-production-env'
    defaults: global
    project-type: pipeline
    sandbox: true
    concurrent: false
    triggers:
      - timed: "0 14 * * 1,3"
    dsl: |
      pipeline {
        agent {
          docker {
            image 'registry.rc.nectar.org.au/docker.io/renovate/renovate'
            reuseNode true
            args '--group-add root'
          }
        }
        stages {
          stage('Run renovate') {
            steps {
              withCredentials([file(credentialsId: 'bbae6659-4494-4484-9b3f-66b28e7a871b', variable: 'FILE')]) {
                sh '''
                  cp $FILE $FILE.json
                  RENOVATE_CONFIG_FILE=$FILE.json renovate
                  '''
              }
            }
          }
        }
      }

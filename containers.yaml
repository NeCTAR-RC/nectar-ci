- project:
    name: containers
    jobs:
      - '{name}-yaml':
         organisation: 'internal'

- job-template:
    name: 'dashboard-kolla-container'
    defaults: global
    project-type: pipeline
    sandbox: true

    parameters:
      - string:
          name: GERRIT_REFSPEC
          default: refs/heads/nectar/wallaby
          description: "The ref to use."
      - string:
          name: GERRIT_BRANCH
          default: nectar/wallaby
          description: "The branch to use."

    triggers:
      - gerrit:
          trigger-on:
              - change-merged-event
          projects:
            - project-compare-type: 'PLAIN'
              project-pattern: 'NeCTAR-RC/horizon'
              branches:
                - branch-compare-type: 'REG_EXP'
                  branch-pattern: 'nectar/.*'
            - project-compare-type: 'REG_EXP'
              project-pattern: 'NeCTAR-RC/.*-dashboard'
              branches:
                - branch-compare-type: 'REG_EXP'
                  branch-pattern: 'nectar/.*'
            - project-compare-type: 'REG_EXP'
              project-pattern: 'NeCTAR-RC/.*-ui'
              branches:
                - branch-compare-type: 'REG_EXP'
                  branch-pattern: 'nectar/.*'
          silent: false
          escape-quotes: true

    dsl: |
      pipeline {{
        agent {{ label 'docker' }}
        stages {{
          stage('Clone') {{
            steps {{
            git poll: false,
                url: 'ssh://jenkins@review.rc.nectar.org.au:29418/internal/nectar-kolla.git',
                credentialsId: 'cd8b8dd3-b897-4ecb-985d-180d5b6f8498',
                branch: '$GERRIT_BRANCH'
            }}
          }}
          stage('Build') {{
            environment {{
              REGISTRY = credentials('registry-nectar')
              REGISTRY_HOST = "registry.rc.nectar.org.au"
            }}
            steps {{
              script {{
                env.OPENSTACK_RELEASE = sh(script: "echo ${{env.GERRIT_BRANCH}} | awk -F '/' '{{ print \$2 }}'",
                                           returnStdout: true).trim()
                env.TAG = "${{env.OPENSTACK_RELEASE}}-${{env.BUILD_NUMBER}}"
              }}
              kollaBuild 'dashboard', "${{env.TAG}}"
            }}
          }}
          stage('Helm package') {{
            steps {{
              build job: 'nectar-dashboard-helm-helm-update-version', parameters: [string(name: 'IMAGE_TAG', value: "${{env.TAG}}"),string(name: 'CHANGE_PROJECT', value: "${{env.GERRIT_PROJECT}}"),string(name: 'CHANGE_MESSAGE', value: "${{env.GERRIT_CHANGE_SUBJECT}}")]
            }}
          }}
        }}
      }}


# This is here because we need to trigger off networking-midonet and
# have a different versioning scheme, once midonet is gone we can remove
# this and use {name}-kolla-container below
- job-template:
    name: 'neutron-kolla-container'
    defaults: global
    project-type: pipeline
    sandbox: true

    parameters:
      - string:
          name: GERRIT_REFSPEC
          default: refs/heads/nectar/wallaby
          description: "The ref to use."
      - string:
          name: GERRIT_BRANCH
          default: nectar/wallaby
          description: "The branch to use."

    triggers:
      - gerrit:
          trigger-on:
              - change-merged-event
          projects:
            - project-compare-type: 'PLAIN'
              project-pattern: 'NeCTAR-RC/neutron'
              branches:
                - branch-compare-type: 'REG_EXP'
                  branch-pattern: 'nectar/.*'
            - project-compare-type: 'PLAIN'
              project-pattern: 'NeCTAR-RC/networking-midonet'
              branches:
                - branch-compare-type: 'REG_EXP'
                  branch-pattern: 'nectar/.*'
          silent: false
          escape-quotes: true

    dsl: |
      pipeline {{
        agent {{ label 'docker' }}
        stages {{
          stage('Clone') {{
            steps {{
            git poll: false,
                url: 'ssh://jenkins@review.rc.nectar.org.au:29418/internal/nectar-kolla.git',
                credentialsId: 'cd8b8dd3-b897-4ecb-985d-180d5b6f8498',
                branch: '$GERRIT_BRANCH'
            }}
          }}
          stage('Build') {{
            environment {{
              REGISTRY = credentials('registry-nectar')
              REGISTRY_HOST = "registry.rc.nectar.org.au"
            }}
            steps {{
              script {{
                env.OPENSTACK_RELEASE = sh(script: "echo ${{env.GERRIT_BRANCH}} | awk -F '/' '{{ print \$2 }}'",
                                           returnStdout: true).trim()
                env.TAG = "${{env.OPENSTACK_RELEASE}}-${{env.BUILD_NUMBER}}"
              }}
              kollaBuild 'neutron', "${{env.TAG}}"
            }}
          }}
        }}
      }}


- job:
    name: 'requirements-kolla-container'
    defaults: global
    project-type: pipeline
    sandbox: true

    parameters:
      - string:
          name: OPENSTACK_RELEASE
          default: wallaby
          description: "Openstack version to use."

    dsl: |
      pipeline {
        agent { label 'docker' }
        stages {
          stage('Clone') {
            steps {
              git poll: false,
                url: 'ssh://jenkins@review.rc.nectar.org.au:29418/internal/nectar-kolla.git',
                credentialsId: 'cd8b8dd3-b897-4ecb-985d-180d5b6f8498',
                branch: 'nectar/${OPENSTACK_RELEASE}'
            }
          }
          stage('Build') {
            environment {
              REGISTRY = credentials('registry-nectar')
            }
            steps {
              sh '''
                export REGISTRY="registry.rc.nectar.org.au"
                export REGISTRY_AUTH_FILE=auth.json
                echo "$REGISTRY_PSW" | docker login -u "$REGISTRY_USR" --password-stdin "$REGISTRY"

                virtualenv kolla
                . kolla/bin/activate
                pip install -r requirements.txt

                docker image prune --all -f

                kolla-build --config-file etc/kolla-build.conf --profile requirements --pull --tag $OPENSTACK_RELEASE --registry $REGISTRY --push

              '''
            }
          }
        }
      }

- job-template:
    name: '{name}-kolla-container'
    defaults: global
    project-type: pipeline
    sandbox: true

    parameters:
      - string:
          name: GERRIT_REFSPEC
          default: refs/heads/nectar/wallaby
          description: "The ref to use."
      - string:
          name: GERRIT_BRANCH
          default: nectar/wallaby
          description: "The kolla branch to use."
      - string:
          name: PROJECT_BRANCH_OVERRIDE
          description: "If project branch is not the same as gerrit branch you can override this here. Leave blank if project follows standard nectar/openstack_version pattern."

    triggers:
      - gerrit:
          trigger-on:
              - change-merged-event
          projects:
            - project-compare-type: 'PLAIN'
              project-pattern: '{organisation}/{name}'
              branches:
                - branch-compare-type: 'REG_EXP'
                  branch-pattern: 'nectar/.*'
          silent: false
          escape-quotes: true

    dsl: |
      pipeline {{
        agent {{ label 'docker' }}
        stages {{
          stage('Clone') {{
            environment {{
              PROJECT_BRANCH = "${{sh(script:'[ -z $PROJECT_BRANCH_OVERRIDE ] && echo $GERRIT_BRANCH || echo $PROJECT_BRANCH_OVERRIDE', returnStdout: true).trim()}}"
            }}
            steps {{
              git poll: false,
                  url: 'ssh://jenkins@review.rc.nectar.org.au:29418/internal/nectar-kolla.git',
                  credentialsId: 'cd8b8dd3-b897-4ecb-985d-180d5b6f8498',
                  branch: '$GERRIT_BRANCH'
              dir ('{name}') {{
                git poll: false,
                    url: 'ssh://jenkins@review.rc.nectar.org.au:29418/NeCTAR-RC/{name}.git',
                    credentialsId: 'cd8b8dd3-b897-4ecb-985d-180d5b6f8498',
                    branch: "${{env.PROJECT_BRANCH}}"
              }}
            }}
          }}
          stage('Build') {{
            environment {{
              REGISTRY = credentials('registry-nectar')
            }}
            steps {{
              sh '''
                cd {name}
                export VERSION_TAG=`git describe`
                cd ..
                export REGISTRY="registry.rc.nectar.org.au"
                export REGISTRY_AUTH_FILE=auth.json
                echo "$REGISTRY_PSW" | docker login -u "$REGISTRY_USR" --password-stdin "$REGISTRY"
                OPENSTACK_RELEASE=`echo $GERRIT_BRANCH | awk -F '/' '{{ print $2 }}'`
                virtualenv kolla
                . kolla/bin/activate
                pip install -r requirements.txt

                docker image prune --all -f
                docker image ls

                docker pull registry.rc.nectar.org.au/kolla/ubuntu-source-base:$OPENSTACK_RELEASE
                docker pull registry.rc.nectar.org.au/kolla/ubuntu-source-openstack-base:$OPENSTACK_RELEASE

                kolla-build --config-file etc/kolla-build.conf --profile {name} --skip-existing --tag $OPENSTACK_RELEASE --registry $REGISTRY --push

                BASE_IMAGE=`docker image ls --filter reference=$REGISTRY/kolla/ubuntu-source-openstack-base:$OPENSTACK_RELEASE --quiet`
                VERSION_TAG=b$BASE_IMAGE-$VERSION_TAG

                for image in `kolla-build --list-images --profile {name} --config-file etc/kolla-build.conf | awk '{{print $3}}' | egrep -v '^(base|openstack-base)$'`
                do
                    docker tag ${{REGISTRY}}/kolla/ubuntu-source-${{image}}:${{OPENSTACK_RELEASE}} ${{REGISTRY}}/kolla/ubuntu-source-${{image}}:${{VERSION_TAG}}
                    docker push ${{REGISTRY}}/kolla/ubuntu-source-${{image}}:${{VERSION_TAG}}
                done
              '''
            }}
          }}
        }}
      }}

- job-template:
    name: '{name}-kolla-container-upstream'
    defaults: global
    project-type: pipeline
    sandbox: true

    parameters:
      - string:
          name: OPENSTACK_RELEASE
          default: wallaby
          description: "Openstack version to use."

    dsl: |
      pipeline {{
        agent {{ label 'docker' }}
        stages {{
          stage('Clone') {{
            steps {{
              git poll: false,
                url: 'ssh://jenkins@review.rc.nectar.org.au:29418/internal/nectar-kolla.git',
                credentialsId: 'cd8b8dd3-b897-4ecb-985d-180d5b6f8498',
                branch: 'nectar/${{OPENSTACK_RELEASE}}'
              dir ('{name}') {{
                git poll: false,
                    url: 'https://github.com/openstack/{name}',
                    branch: 'stable/${{OPENSTACK_RELEASE}}'
              }}
            }}
          }}
          stage('Build') {{
            environment {{
              REGISTRY = credentials('registry-nectar')
            }}
            steps {{
              sh '''
                cd {name}
                export VERSION_TAG=`git describe`
                cd ..
                export REGISTRY="registry.rc.nectar.org.au"
                export REGISTRY_AUTH_FILE=auth.json
                echo "$REGISTRY_PSW" | docker login -u "$REGISTRY_USR" --password-stdin "$REGISTRY"
                virtualenv kolla
                . kolla/bin/activate
                pip install -r requirements.txt

                docker image prune --all -f

                docker pull ${{REGISTRY}}/kolla/ubuntu-source-base:${{OPENSTACK_RELEASE}}
                docker pull ${{REGISTRY}}/kolla/ubuntu-source-openstack-base:${{OPENSTACK_RELEASE}}

                kolla-build --config-file etc/kolla-build.conf --profile {name} --skip-existing --tag $OPENSTACK_RELEASE --registry $REGISTRY --push

                BASE_IMAGE=`docker image ls --filter reference=$REGISTRY/kolla/ubuntu-source-openstack-base:$OPENSTACK_RELEASE --quiet`
                VERSION_TAG=b$BASE_IMAGE-$VERSION_TAG

                for image in `kolla-build --list-images --profile {name} --config-file etc/kolla-build.conf | awk '{{print $3}}' | egrep -v '^(base|openstack-base)$'`
                do
                    docker tag ${{REGISTRY}}/kolla/ubuntu-source-${{image}}:${{OPENSTACK_RELEASE}} ${{REGISTRY}}/kolla/ubuntu-source-${{image}}:${{VERSION_TAG}}
                    docker push ${{REGISTRY}}/kolla/ubuntu-source-${{image}}:${{VERSION_TAG}}
                done

              '''
            }}
          }}
        }}
      }}

- job-template:
    name: '{name}-helm-update-version'
    defaults: global
    project-type: pipeline
    sandbox: true
    concurrent: false

    parameters:
      - string:
          name: IMAGE_TAG
          description: "New image tag for version"
      - string:
          name: CHANGE_MESSAGE
          description: "Commit change message"
      - string:
          name: CHANGE_PROJECT
          description: "Project which initiated the this version update"

    dsl: |
      pipeline {{
        agent {{ label 'internal' }}
        stages {{
          stage('Clone') {{
            steps {{
              git poll: false,
                  url: 'https://jenkins@review.rc.nectar.org.au/a/{organisation}/{name}',
                  credentialsId: '2f00f9a5-00c3-42fe-82bf-cc787af1df8c',
                  branch: 'master'
            }}
          }}
          stage('Build') {{
            steps {{
              script {{
                def chart = readYaml file: 'Chart.yaml'
                def split = chart.version.split('\\.')
                split[2] = Integer.parseInt(split[2]) + 1
                chart.version = split.join('.')
                chart.appVersion = "$IMAGE_TAG"
                def new_chart = writeYaml file: 'Chart.yaml',  data: chart, overwrite:true
              }}
              sh '''
              cat Chart.yaml
              git config user.name 'Jenkins'
              git config user.email 'jenkins@rc.nectar.org.au'
              git add Chart.yaml && git commit -a -m "[Jenkins CI] New appVersion: \$IMAGE_TAG" -m "Project: \$CHANGE_PROJECT" -m "\$CHANGE_MESSAGE"
              '''
            }}
          }}
          stage("Push") {{
            environment {{
              GIT_AUTH = credentials('2f00f9a5-00c3-42fe-82bf-cc787af1df8c')
            }}
            steps {{
              sh('''
                 git show -q
                 git config --local credential.helper "!f() {{ echo username=\\$GIT_AUTH_USR; echo password=\\$GIT_AUTH_PSW; }}; f"
                 git push origin HEAD:refs/heads/master
                 git config --local --unset credential.helper
              ''')
            }}
          }}
          stage("Package") {{
              steps {{
                build(job: '{name}-helm-package')
              }}
          }}
        }}
        post {{
          cleanup {{
            node('internal') {{
              deleteDir() /* clean up our workspace */
            }}
          }}
        }}
      }}

- job-template:
    name: '{name}-container'
    defaults: global
    project-type: pipeline
    sandbox: true
    helm_name: false

    parameters:
      - string:
          name: GERRIT_REFSPEC
          default: refs/heads/master
          description: "The ref to use."
      - string:
          name: GERRIT_BRANCH
          default: master
          description: "The branch to use."

    triggers:
      - gerrit:
          trigger-on:
              - change-merged-event
              - patchset-created-event
          projects:
            - project-compare-type: 'PLAIN'
              project-pattern: '{organisation}/{name}'
              branches:
                - branch-compare-type: 'REG_EXP'
                  branch-pattern: 'nectar/.*'
                - branch-compare-type: 'PLAIN'
                  branch-pattern: 'master'
          silent: false
          escape-quotes: true

    dsl: |
      pipeline {{
        agent {{ label 'docker' }}
        environment {{
          TAG = "${{env.GERRIT_EVENT_TYPE == "patchset-created" ? "review-" + env.GERRIT_CHANGE_NUMBER : "" }}"
        }}
        stages {{
          stage('Clone') {{
            steps {{
                checkout(
                  poll: false,
                  scm: [
                    $class: 'GitSCM',
                    branches: [[name: 'origin/$GERRIT_BRANCH']],
                    extensions: [
                      [$class: 'CloneOption', honorRefspec: true],
                      [$class: 'CleanCheckout'],
                      [$class: 'BuildChooserSetting', buildChooser: [$class: 'GerritTriggerBuildChooser']]
                    ],
                    userRemoteConfigs: [[
                      credentialsId: 'cd8b8dd3-b897-4ecb-985d-180d5b6f8498',
                      name: 'origin',
                      refspec: '$GERRIT_REFSPEC',
                      url: 'ssh://jenkins@review.rc.nectar.org.au:29418/{organisation}/{name}.git'
                    ]]
                  ]
                )
            }}
          }}

          stage('Build') {{
            steps {{
                sh '''
                make build BUILDER=podman TAG=$TAG
                '''
            }}
          }}
          stage('Push') {{
            environment {{
              REGISTRY = credentials('registry-nectar')
            }}
            steps {{
                sh '''
                export REGISTRY="registry.rc.nectar.org.au"
                export REGISTRY_AUTH_FILE=auth.json
                echo "$REGISTRY_PSW" | podman login -u "$REGISTRY_USR" --password-stdin "$REGISTRY"

                make push BUILDER=podman TAG=$TAG

                rm auth.json
                '''
            }}
          }}
          stage('Helm package update') {{
            when {{
                expression {{
                  return '{helm_name}' && env.GERRIT_EVENT_TYPE != 'patchset-created'
                }}
            }}
            steps {{
                script {{
                  env.IMAGE_TAG = sh(script: "git describe --tags --always", returnStdout: true).trim()
                }}
                build job: '{helm_name}-helm-update-version', parameters: [string(name: 'IMAGE_TAG', value: "${{env.IMAGE_TAG}}"),string(name: 'CHANGE_PROJECT', value: "${{env.GERRIT_PROJECT}}"),string(name: 'CHANGE_MESSAGE', value: "${{env.GERRIT_CHANGE_SUBJECT}}")]
            }}
          }}
        }}
      }}

- job-template:
    name: 'requirements-container-{ubuntu_release}-{os_release}'
    defaults: global
    project-type: pipeline
    sandbox: true

    properties:
      - copyartifact:
          projects: '*'

    parameters:
      - string:
          name: GERRIT_REFSPEC
          default: refs/heads/master
          description: "The Loci ref to use."
      - string:
          name: GERRIT_BRANCH
          default: master
          description: "The Loci branch to use."

    triggers:
      - pollscm:
          cron: "H 8 * * *"
      - gerrit:
          trigger-on:
              - change-merged-event
              - patchset-created-event
          projects:
            - project-compare-type: 'PLAIN'
              project-pattern: 'internal/nectar-loci'
              branches:
                - branch-compare-type: 'PLAIN'
                  branch-pattern: 'master'
          silent: false
          escape-quotes: true
          skip-vote:
            successful: true
            failed: true
            unstable: true
            notbuilt: true

    dsl: |
      pipeline {{
        agent {{ label 'docker' }}
        options {{
            copyArtifactPermission('*')
        }}
        stages {{
          stage('Clone') {{
            steps {{
                checkout(
                  poll: false,
                  scm: [
                    $class: 'GitSCM',
                    branches: [[name: 'origin/$GERRIT_BRANCH']],
                    extensions: [
                      [$class: 'CloneOption', depth: 1, honorRefspec: true, shallow: true],
                      [$class: 'CleanCheckout'],
                      [$class: 'WipeWorkspace'],
                      [$class: 'BuildChooserSetting', buildChooser: [$class: 'GerritTriggerBuildChooser']],
                    ],
                    userRemoteConfigs: [[
                      credentialsId: 'cd8b8dd3-b897-4ecb-985d-180d5b6f8498',
                      name: 'origin',
                      refspec: '$GERRIT_REFSPEC',
                      url: 'ssh://jenkins@review.rc.nectar.org.au:29418/internal/nectar-loci.git'
                    ]]
                  ]
                )
                dir('src') {{
                  git(
                    url: 'https://github.com/openstack/requirements.git',
                    branch: 'stable/{os_release}'
                  )
                }}
                sh '''
                git submodule init
                git submodule update
                '''
            }}
          }}
          stage('Build requirements image') {{
            environment {{
              REGISTRY = credentials('registry')
            }}
            steps {{
                sh '''
                export BUILDAH_FORMAT=docker

                export REGISTRY="registry.rc.nectar.org.au"
                export REGISTRY_AUTH_FILE=auth.json
                echo "$REGISTRY_PSW" | podman login -u "$REGISTRY_USR" --password-stdin "$REGISTRY"

                make BUILDER=podman OPENSTACK_VERSION={os_release} UBUNTU_VERSION={ubuntu_release} DOCKER_REPO="$REGISTRY/loci" REPO=src requirements

                rm auth.json

                mkdir -p artifacts
                git -C src rev-parse --verify --short HEAD > artifacts/REQUIREMENTS_VERSION
                git rev-parse --verify --short HEAD > artifacts/LOCI_VERSION
                cp IMAGE IMAGE_TAG artifacts/
                echo "$GERRIT_EVENT_TYPE" > artifacts/GERRIT_EVENT_TYPE
                '''
                archiveArtifacts artifacts: 'artifacts/*', fingerprint: true
            }}
          }}
        }}
      }}

- job-template:
    name: '{name}-container-{ubuntu_release}-{os_release}'
    defaults: global
    project-type: pipeline
    sandbox: true

    deploy_to_test: 'false'

    properties:
      - copyartifact:
          projects: '*'

    parameters:
      - string:
          name: GERRIT_REFSPEC
          default: "refs/heads/nectar/{os_release}"
          description: "The default ref to test."
      - string:
          name: GERRIT_BRANCH
          default: "nectar/{os_release}"
          description: "The default branch to test."

    triggers:
      - gerrit:
          trigger-on:
              - change-merged-event
              - patchset-created-event
          projects:
            - project-compare-type: 'PLAIN'
              project-pattern: '{organisation}/{name}'
              branches:
                - branch-compare-type: 'PLAIN'
                  branch-pattern: 'nectar/{os_release}'
          silent: false
          escape-quotes: true
          skip-vote:
            successful: true
            failed: true
            unstable: true
            notbuilt: true

      - reverse:
          jobs:
            - 'requirements-container-{ubuntu_release}-{os_release}'

    dsl: |
      def copyArtifactSelector = upstream()

      pipeline {{
        agent {{ label 'docker' }}
        stages {{
          stage('Get artifacts') {{
            steps {{
              script {{
                if (currentBuild.upstreamBuilds.size() == 0) {{
                  build = selectRun(
                    job: 'requirements-container-{ubuntu_release}-{os_release}',
                    selector: status('SUCCESSFUL'),
                    filter: or([parameters("GERRIT_EVENT_TYPE=change-merged"), parameters("GERRIT_REFSPEC=refs/heads/master")]),
                    verbose: true
                  )
                  copyArtifactSelector = specific(build.getId())
                }}
                copyArtifacts(
                  projectName: 'requirements-container-{ubuntu_release}-{os_release}',
                  selector: copyArtifactSelector,
                  fingerprintArtifacts: true,
                )
              }}
            }}
          }}

          stage('Clone') {{
            environment {{
              LOCI_SHA = readFile('artifacts/LOCI_VERSION')
            }}
            steps {{
                checkout(
                  poll: false,
                  scm: [
                    $class: 'GitSCM',
                    branches: [[name: env.LOCI_SHA]],
                    extensions: [
                      [$class: 'CleanCheckout'],
                    ],
                    userRemoteConfigs: [[
                      credentialsId: 'cd8b8dd3-b897-4ecb-985d-180d5b6f8498',
                      name: 'origin',
                      refspec: '+refs/heads/*:refs/remotes/origin/* +refs/changes/*:refs/remotes/origin/*',
                      url: 'ssh://jenkins@review.rc.nectar.org.au:29418/internal/nectar-loci.git'
                    ]]
                  ]
                )
                checkout(
                  poll: false,
                  scm: [
                    $class: 'GitSCM',
                    branches: [[name: 'origin/$GERRIT_BRANCH']],
                    extensions: [
                      [$class: 'CloneOption', depth: 1, honorRefspec: true, shallow: true],
                      [$class: 'RelativeTargetDirectory', relativeTargetDir: 'src'],
                      [$class: 'CleanCheckout'],
                      [$class: 'BuildChooserSetting', buildChooser: [$class: 'GerritTriggerBuildChooser']]
                    ],
                    userRemoteConfigs: [[
                      credentialsId: 'cd8b8dd3-b897-4ecb-985d-180d5b6f8498',
                      name: 'origin',
                      refspec: '$GERRIT_REFSPEC',
                      url: 'ssh://jenkins@review.rc.nectar.org.au:29418/{organisation}/{name}.git'
                    ]]
                  ]
                )
                sh '''
                git submodule init
                git submodule update
                '''
            }}
          }}

          stage('Build') {{
            environment {{
              REGISTRY = credentials('registry')
            }}
            steps {{
                copyArtifacts(
                  projectName: 'requirements-container-{ubuntu_release}-{os_release}',
                  selector: copyArtifactSelector,
                  fingerprintArtifacts: true,
                )
                sh '''
                echo "Building $GERRIT_BRANCH ($GERRIT_REFSPEC)"
                export BUILDAH_FORMAT=docker
                export REQUIREMENTS_SHA=`cat artifacts/REQUIREMENTS_VERSION`

                export REGISTRY="registry.rc.nectar.org.au"
                export REGISTRY_AUTH_FILE=auth.json
                echo "$REGISTRY_PSW" | podman login -u "$REGISTRY_USR" --password-stdin "$REGISTRY"

                make BUILDER=podman OPENSTACK_VERSION={os_release} UBUNTU_VERSION={ubuntu_release} DOCKER_REPO="$REGISTRY/loci" REPO=src REQUIREMENTS_SHA=$REQUIREMENTS_SHA {name}

                rm auth.json

                cp IMAGE IMAGE_TAG artifacts/
                '''
                archiveArtifacts artifacts: 'artifacts/*', fingerprint: true
            }}
          }}

          stage('Deploy to rctest') {{
            when {{
                expression {{
                  return {deploy_to_test} && readFile('artifacts/GERRIT_EVENT_TYPE') != 'patchset-created' && env.GERRIT_EVENT_TYPE != 'patchset-created'
                }}
            }}
            steps {{
                build(job: '{name}-container-{ubuntu_release}-{os_release}-deploy-rctest')
            }}
          }}
        }}
      }}

- job-template:
    name: '{name}-container-{ubuntu_release}-{os_release}-upstream'
    defaults: global
    project-type: pipeline
    sandbox: true

    deploy_to_test: 'false'

    properties:
      - copyartifact:
          projects: '*'

    triggers:
      - reverse:
          jobs:
            - 'requirements-container-{ubuntu_release}-{os_release}'

    dsl: |
      def copyArtifactSelector = upstream()

      pipeline {{
        agent {{ label 'docker' }}
        stages {{
          stage('Get artifacts') {{
            steps {{
              script {{
                if (currentBuild.upstreamBuilds.size() == 0) {{
                  build = selectRun(
                    job: 'requirements-container-{ubuntu_release}-{os_release}',
                    selector: status('SUCCESSFUL'),
                    filter: or([parameters("GERRIT_EVENT_TYPE=change-merged"), parameters("GERRIT_REFSPEC=refs/heads/master")]),
                    verbose: true
                  )
                  copyArtifactSelector = specific(build.getId())
                }}
                copyArtifacts(
                  projectName: 'requirements-container-{ubuntu_release}-{os_release}',
                  selector: copyArtifactSelector,
                  fingerprintArtifacts: true,
                )
              }}
            }}
          }}

          stage('Clone') {{
            environment {{
              LOCI_SHA = readFile('artifacts/LOCI_VERSION')
            }}
            steps {{
                checkout(
                  poll: false,
                  scm: [
                    $class: 'GitSCM',
                    branches: [[name: env.LOCI_SHA]],
                    extensions: [
                      [$class: 'CleanCheckout'],
                    ],
                    userRemoteConfigs: [[
                      credentialsId: 'cd8b8dd3-b897-4ecb-985d-180d5b6f8498',
                      name: 'origin',
                      refspec: '+refs/heads/*:refs/remotes/origin/* +refs/changes/*:refs/remotes/origin/*',
                      url: 'ssh://jenkins@review.rc.nectar.org.au:29418/internal/nectar-loci.git'
                    ]]
                  ]
                )
                checkout(
                  poll: false,
                  scm: [
                    $class: 'GitSCM',
                    branches: [[name: 'origin/stable/{os_release}']],
                    extensions: [
                      [$class: 'CloneOption', depth: 1, honorRefspec: true, shallow: true],
                      [$class: 'RelativeTargetDirectory', relativeTargetDir: 'src'],
                      [$class: 'CleanCheckout'],
                      [$class: 'BuildChooserSetting', buildChooser: [$class: 'GerritTriggerBuildChooser']]
                    ],
                    userRemoteConfigs: [[
                      name: 'origin',
                      refspec: "refs/heads/stable/{os_release}",
                      url: 'https://github.com/openstack/{name}.git'
                    ]]
                  ]
                )
                sh '''
                git submodule init
                git submodule update
                '''
            }}
          }}

          stage('Build') {{
            environment {{
              REGISTRY = credentials('registry')
            }}
            steps {{
                copyArtifacts(
                  projectName: 'requirements-container-{ubuntu_release}-{os_release}',
                  selector: copyArtifactSelector,
                  fingerprintArtifacts: true,
                )
                sh '''
                echo "Building stable/{os_release} (refs/heads/stable/{os_release})"
                export BUILDAH_FORMAT=docker
                export REQUIREMENTS_SHA=`cat artifacts/REQUIREMENTS_VERSION`

                export REGISTRY="registry.rc.nectar.org.au"
                export REGISTRY_AUTH_FILE=auth.json
                echo "$REGISTRY_PSW" | podman login -u "$REGISTRY_USR" --password-stdin "$REGISTRY"

                make BUILDER=podman OPENSTACK_VERSION={os_release} UBUNTU_VERSION={ubuntu_release} DOCKER_REPO="$REGISTRY/loci" REPO=src REQUIREMENTS_SHA=$REQUIREMENTS_SHA {name}

                rm auth.json

                cp IMAGE IMAGE_TAG artifacts/
                '''
                archiveArtifacts artifacts: 'artifacts/*', fingerprint: true
            }}
          }}

          stage('Deploy to rctest') {{
            when {{
                expression {{
                  return {deploy_to_test} && readFile('artifacts/GERRIT_EVENT_TYPE') != 'patchset-created' && env.GERRIT_EVENT_TYPE != 'patchset-created'
                }}
            }}
            steps {{
                build(job: '{name}-container-{ubuntu_release}-{os_release}-deploy-rctest')
            }}
          }}
        }}
      }}

- job-template:
    name: '{name}-container-{ubuntu_release}-{os_release}-deploy-rctest'
    defaults: global
    project-type: pipeline
    sandbox: true

    git_credential: '2f00f9a5-00c3-42fe-82bf-cc787af1df8c'

    dsl: |
      def copyArtifactSelector = upstream()

      pipeline {{
        agent any
        stages {{
          stage("Get artifacts") {{
            steps {{
              script {{
                if (currentBuild.upstreamBuilds.size() == 0) {{
                  build = selectRun(
                    job: '{name}-container-{ubuntu_release}-{os_release}',
                    selector: status('SUCCESSFUL'),
                    filter: or([parameters("GERRIT_EVENT_TYPE=change-merged"), parameters("GERRIT_REFSPEC=refs/heads/nectar/{os_release}")]),
                    verbose: true
                  )
                  copyArtifactSelector = specific(build.getId())
                }}
                copyArtifacts(
                  projectName: '{name}-container-{ubuntu_release}-{os_release}',
                  selector: copyArtifactSelector,
                  fingerprintArtifacts: true,
                )
              }}
            }}
          }}
          stage("Update tag") {{
            environment {{
              IMAGE_TAG = readFile('artifacts/IMAGE_TAG').trim()
            }}
            steps {{
              git(
                changelog: false,
                credentialsId: '{git_credential}',
                poll: false,
                url: 'https://jenkins@review.rc.nectar.org.au/a/internal/puppet-site-rctest'
              )
              sh('''
                sed -i \"s/^profile::core::{name}::version: .*/profile::core::{name}::version: $IMAGE_TAG/g\" data/base.yaml
                git checkout -B master
                git config user.name 'Jenkins'
                git config user.email 'jenkins@rc.nectar.org.au'
                git add data/base.yaml && git commit -am "[Jenkins CI] {name}::version: $IMAGE_TAG"
              ''')
            }}
          }}
          stage("Push") {{
            environment {{
              GIT_AUTH = credentials('{git_credential}')
            }}
            steps {{
              sh('''
                  git show -q
                  git config --local credential.helper "!f() {{ echo username=\\$GIT_AUTH_USR; echo password=\\$GIT_AUTH_PSW; }}; f"
                  git push origin HEAD:refs/heads/master
                  git config --local --unset credential.helper
              ''')
            }}
          }}
        }}
        post {{
          success {{
            build (
              job: 'puppet-site-rctest-r10k-deploy-control-repo',
              parameters: [string(name: 'GERRIT_PROJECT', value: 'internal/puppet-site-rctest')]
            )
          }}
        }}
      }}

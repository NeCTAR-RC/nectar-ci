- project:
    name: containers
    jobs:
      - '{name}-dummy':
         access: 'nobody'
         organisation: 'internal'

- job-template:
    name: '{name}-container'
    defaults: global
    project-type: pipeline
    sandbox: true

    parameters:
      - string:
          name: GERRIT_REFSPEC
          default: refs/heads/master
          description: "The ref to use."
      - string:
          name: GERRIT_BRANCH
          default: master
          description: "The branch to use."

    triggers:
      - gerrit:
          trigger-on:
              - change-merged-event
              - patchset-created-event
          projects:
            - project-compare-type: 'PLAIN'
              project-pattern: '{organisation}/{name}'
              branches:
                - branch-compare-type: 'REG_EXP'
                  branch-pattern: 'nectar/.*'
                - branch-compare-type: 'PLAIN'
                  branch-pattern: 'master'
          silent: false
          escape-quotes: true

    dsl: |
      pipeline {{
        agent {{ label 'docker' }}
        environment {{
          TAG = "${{env.GERRIT_EVENT_TYPE == "patchset-created" ? "review-" + env.GERRIT_CHANGE_NUMBER : "" }}"
        }}
        stages {{
          stage('Clone') {{
            steps {{
                checkout(
                  poll: false,
                  scm: [
                    $class: 'GitSCM',
                    branches: [[name: 'origin/$GERRIT_BRANCH']],
                    extensions: [
                      [$class: 'CloneOption', honorRefspec: true],
                      [$class: 'CleanCheckout'],
                      [$class: 'BuildChooserSetting', buildChooser: [$class: 'GerritTriggerBuildChooser']]
                    ],
                    userRemoteConfigs: [[
                      credentialsId: '4946c3a5-9f5e-4eac-9ec4-90e1e348db14',
                      name: 'origin',
                      refspec: '$GERRIT_REFSPEC',
                      url: 'ssh://jenkins@review.rc.nectar.org.au:29418/{organisation}/{name}.git'
                    ]]
                  ]
                )
            }}
          }}

          stage('Build') {{
            steps {{
                sh '''
                make build BUILDER=podman TAG=$TAG
                '''
            }}
          }}
          stage('Push') {{
            environment {{
              REGISTRY = credentials('registry-nectar')
            }}
            steps {{
                sh '''
                export REGISTRY="registry.rc.nectar.org.au"
                export REGISTRY_AUTH_FILE=auth.json
                echo "$REGISTRY_PSW" | podman login -u "$REGISTRY_USR" --password-stdin "$REGISTRY"

                make push BUILDER=podman TAG=$TAG

                rm auth.json
                '''
            }}
          }}
        }}
      }}

- job-template:
    name: 'requirements-container-{ubuntu_release}-{os_release}'
    defaults: global
    project-type: pipeline
    sandbox: true

    properties:
      - copyartifact:
          projects: '*'

    parameters:
      - string:
          name: GERRIT_REFSPEC
          default: refs/heads/master
          description: "The Loci ref to use."
      - string:
          name: GERRIT_BRANCH
          default: master
          description: "The Loci branch to use."

    triggers:
      - pollscm:
          cron: "H 8 * * *"
      - gerrit:
          trigger-on:
              - change-merged-event
              - patchset-created-event
          projects:
            - project-compare-type: 'PLAIN'
              project-pattern: 'internal/nectar-loci'
              branches:
                - branch-compare-type: 'PLAIN'
                  branch-pattern: 'master'
          silent: false
          escape-quotes: true
          skip-vote:
            successful: true
            failed: true
            unstable: true
            notbuilt: true

    dsl: |
      pipeline {{
        agent {{ label 'docker' }}
        options {{
            copyArtifactPermission('*')
        }}
        stages {{
          stage('Clone') {{
            steps {{
                checkout(
                  poll: false,
                  scm: [
                    $class: 'GitSCM',
                    branches: [[name: 'origin/$GERRIT_BRANCH']],
                    extensions: [
                      [$class: 'CloneOption', depth: 1, honorRefspec: true, shallow: true],
                      [$class: 'CleanCheckout'],
                      [$class: 'WipeWorkspace'],
                      [$class: 'BuildChooserSetting', buildChooser: [$class: 'GerritTriggerBuildChooser']],
                    ],
                    userRemoteConfigs: [[
                      credentialsId: '4946c3a5-9f5e-4eac-9ec4-90e1e348db14',
                      name: 'origin',
                      refspec: '$GERRIT_REFSPEC',
                      url: 'ssh://jenkins@review.rc.nectar.org.au:29418/internal/nectar-loci.git'
                    ]]
                  ]
                )
                dir('src') {{
                  git(
                    url: 'https://github.com/openstack/requirements.git',
                    branch: 'stable/{os_release}'
                  )
                }}
                sh '''
                git submodule init
                git submodule update
                '''
            }}
          }}
          stage('Build requirements image') {{
            environment {{
              REGISTRY = credentials('registry')
            }}
            steps {{
                sh '''
                export BUILDAH_FORMAT=docker

                export REGISTRY="registry.rc.nectar.org.au"
                export REGISTRY_AUTH_FILE=auth.json
                echo "$REGISTRY_PSW" | podman login -u "$REGISTRY_USR" --password-stdin "$REGISTRY"

                make BUILDER=podman OPENSTACK_VERSION={os_release} UBUNTU_VERSION={ubuntu_release} DOCKER_REPO="$REGISTRY/loci" REPO=src requirements

                rm auth.json

                mkdir -p artifacts
                git -C src rev-parse --verify --short HEAD > artifacts/REQUIREMENTS_VERSION
                git rev-parse --verify --short HEAD > artifacts/LOCI_VERSION
                cp IMAGE IMAGE_TAG artifacts/
                echo "$GERRIT_EVENT_TYPE" > artifacts/GERRIT_EVENT_TYPE
                '''
                archiveArtifacts artifacts: 'artifacts/*', fingerprint: true
            }}
          }}
        }}
      }}

- job-template:
    name: '{name}-container-{ubuntu_release}-{os_release}'
    defaults: global
    project-type: pipeline
    sandbox: true

    deploy_to_test: 'false'

    properties:
      - copyartifact:
          projects: '*'

    parameters:
      - string:
          name: GERRIT_REFSPEC
          default: "refs/heads/nectar/{os_release}"
          description: "The default ref to test."
      - string:
          name: GERRIT_BRANCH
          default: "nectar/{os_release}"
          description: "The default branch to test."

    triggers:
      - gerrit:
          trigger-on:
              - change-merged-event
              - patchset-created-event
          projects:
            - project-compare-type: 'PLAIN'
              project-pattern: '{organisation}/{name}'
              branches:
                - branch-compare-type: 'PLAIN'
                  branch-pattern: 'nectar/{os_release}'
          silent: false
          escape-quotes: true
          skip-vote:
            successful: true
            failed: true
            unstable: true
            notbuilt: true

      - reverse:
          jobs:
            - 'requirements-container-{ubuntu_release}-{os_release}'

    dsl: |
      def copyArtifactSelector = upstream()

      pipeline {{
        agent {{ label 'docker' }}
        stages {{
          stage('Get artifacts') {{
            steps {{
              script {{
                if (currentBuild.upstreamBuilds.size() == 0) {{
                  build = selectRun(
                    job: 'requirements-container-{ubuntu_release}-{os_release}',
                    selector: status('SUCCESSFUL'),
                    filter: or([parameters("GERRIT_EVENT_TYPE=change-merged"), parameters("GERRIT_REFSPEC=refs/heads/master")]),
                    verbose: true
                  )
                  copyArtifactSelector = specific(build.getId())
                }}
                copyArtifacts(
                  projectName: 'requirements-container-{ubuntu_release}-{os_release}',
                  selector: copyArtifactSelector,
                  fingerprintArtifacts: true,
                )
              }}
            }}
          }}

          stage('Clone') {{
            environment {{
              LOCI_SHA = readFile('artifacts/LOCI_VERSION')
            }}
            steps {{
                checkout(
                  poll: false,
                  scm: [
                    $class: 'GitSCM',
                    branches: [[name: env.LOCI_SHA]],
                    extensions: [
                      [$class: 'CleanCheckout'],
                    ],
                    userRemoteConfigs: [[
                      credentialsId: '4946c3a5-9f5e-4eac-9ec4-90e1e348db14',
                      name: 'origin',
                      refspec: '+refs/heads/*:refs/remotes/origin/* +refs/changes/*:refs/remotes/origin/*',
                      url: 'ssh://jenkins@review.rc.nectar.org.au:29418/internal/nectar-loci.git'
                    ]]
                  ]
                )
                checkout(
                  poll: false,
                  scm: [
                    $class: 'GitSCM',
                    branches: [[name: 'origin/$GERRIT_BRANCH']],
                    extensions: [
                      [$class: 'CloneOption', depth: 1, honorRefspec: true, shallow: true],
                      [$class: 'RelativeTargetDirectory', relativeTargetDir: 'src'],
                      [$class: 'CleanCheckout'],
                      [$class: 'BuildChooserSetting', buildChooser: [$class: 'GerritTriggerBuildChooser']]
                    ],
                    userRemoteConfigs: [[
                      credentialsId: '4946c3a5-9f5e-4eac-9ec4-90e1e348db14',
                      name: 'origin',
                      refspec: '$GERRIT_REFSPEC',
                      url: 'ssh://jenkins@review.rc.nectar.org.au:29418/{organisation}/{name}.git'
                    ]]
                  ]
                )
                sh '''
                git submodule init
                git submodule update
                '''
            }}
          }}

          stage('Build') {{
            environment {{
              REGISTRY = credentials('registry')
            }}
            steps {{
                copyArtifacts(
                  projectName: 'requirements-container-{ubuntu_release}-{os_release}',
                  selector: copyArtifactSelector,
                  fingerprintArtifacts: true,
                )
                sh '''
                echo "Building $GERRIT_BRANCH ($GERRIT_REFSPEC)"
                export BUILDAH_FORMAT=docker
                export REQUIREMENTS_SHA=`cat artifacts/REQUIREMENTS_VERSION`

                export REGISTRY="registry.rc.nectar.org.au"
                export REGISTRY_AUTH_FILE=auth.json
                echo "$REGISTRY_PSW" | podman login -u "$REGISTRY_USR" --password-stdin "$REGISTRY"

                make BUILDER=podman OPENSTACK_VERSION={os_release} UBUNTU_VERSION={ubuntu_release} DOCKER_REPO="$REGISTRY/loci" REPO=src REQUIREMENTS_SHA=$REQUIREMENTS_SHA {name}

                rm auth.json

                cp IMAGE IMAGE_TAG artifacts/
                '''
                archiveArtifacts artifacts: 'artifacts/*', fingerprint: true
            }}
          }}

          stage('Deploy to rctest') {{
            when {{
                expression {{
                  return {deploy_to_test} && readFile('artifacts/GERRIT_EVENT_TYPE') != 'patchset-created' && env.GERRIT_EVENT_TYPE != 'patchset-created'
                }}
            }}
            steps {{
                build(job: '{name}-container-{ubuntu_release}-{os_release}-deploy-rctest')
            }}
          }}
        }}
      }}

- job-template:
    name: '{name}-container-{ubuntu_release}-{os_release}-upstream'
    defaults: global
    project-type: pipeline
    sandbox: true

    deploy_to_test: 'false'

    properties:
      - copyartifact:
          projects: '*'

    parameters:
      - string:
          name: GERRIT_REFSPEC
          default: "refs/heads/stable/{os_release}"
          description: "The default ref to test."
      - string:
          name: GERRIT_BRANCH
          default: "stable/{os_release}"
          description: "The default branch to test."

    triggers:
      - gerrit:
          silent: false
          escape-quotes: true
          skip-vote:
            successful: true
            failed: true
            unstable: true
            notbuilt: true

      - reverse:
          jobs:
            - 'requirements-container-{ubuntu_release}-{os_release}'

    dsl: |
      def copyArtifactSelector = upstream()

      pipeline {{
        agent {{ label 'docker' }}
        stages {{
          stage('Get artifacts') {{
            steps {{
              script {{
                if (currentBuild.upstreamBuilds.size() == 0) {{
                  build = selectRun(
                    job: 'requirements-container-{ubuntu_release}-{os_release}',
                    selector: status('SUCCESSFUL'),
                    filter: or([parameters("GERRIT_EVENT_TYPE=change-merged"), parameters("GERRIT_REFSPEC=refs/heads/master")]),
                    verbose: true
                  )
                  copyArtifactSelector = specific(build.getId())
                }}
                copyArtifacts(
                  projectName: 'requirements-container-{ubuntu_release}-{os_release}',
                  selector: copyArtifactSelector,
                  fingerprintArtifacts: true,
                )
              }}
            }}
          }}

          stage('Clone') {{
            environment {{
              LOCI_SHA = readFile('artifacts/LOCI_VERSION')
            }}
            steps {{
                checkout(
                  poll: false,
                  scm: [
                    $class: 'GitSCM',
                    branches: [[name: env.LOCI_SHA]],
                    extensions: [
                      [$class: 'CleanCheckout'],
                    ],
                    userRemoteConfigs: [[
                      credentialsId: '4946c3a5-9f5e-4eac-9ec4-90e1e348db14',
                      name: 'origin',
                      refspec: '+refs/heads/*:refs/remotes/origin/* +refs/changes/*:refs/remotes/origin/*',
                      url: 'ssh://jenkins@review.rc.nectar.org.au:29418/internal/nectar-loci.git'
                    ]]
                  ]
                )
                checkout(
                  poll: false,
                  scm: [
                    $class: 'GitSCM',
                    branches: [[name: 'origin/$GERRIT_BRANCH']],
                    extensions: [
                      [$class: 'CloneOption', depth: 1, honorRefspec: true, shallow: true],
                      [$class: 'RelativeTargetDirectory', relativeTargetDir: 'src'],
                      [$class: 'CleanCheckout'],
                      [$class: 'BuildChooserSetting', buildChooser: [$class: 'GerritTriggerBuildChooser']]
                    ],
                    userRemoteConfigs: [[
                      name: 'origin',
                      refspec: '$GERRIT_REFSPEC',
                      url: 'https://github.com/openstack/{name}.git'
                    ]]
                  ]
                )
                sh '''
                git submodule init
                git submodule update
                '''
            }}
          }}

          stage('Build') {{
            environment {{
              REGISTRY = credentials('registry')
            }}
            steps {{
                copyArtifacts(
                  projectName: 'requirements-container-{ubuntu_release}-{os_release}',
                  selector: copyArtifactSelector,
                  fingerprintArtifacts: true,
                )
                sh '''
                echo "Building $GERRIT_BRANCH ($GERRIT_REFSPEC)"
                export BUILDAH_FORMAT=docker
                export REQUIREMENTS_SHA=`cat artifacts/REQUIREMENTS_VERSION`

                export REGISTRY="registry.rc.nectar.org.au"
                export REGISTRY_AUTH_FILE=auth.json
                echo "$REGISTRY_PSW" | podman login -u "$REGISTRY_USR" --password-stdin "$REGISTRY"

                make BUILDER=podman OPENSTACK_VERSION={os_release} UBUNTU_VERSION={ubuntu_release} DOCKER_REPO="$REGISTRY/loci" REPO=src REQUIREMENTS_SHA=$REQUIREMENTS_SHA {name}

                rm auth.json

                cp IMAGE IMAGE_TAG artifacts/
                '''
                archiveArtifacts artifacts: 'artifacts/*', fingerprint: true
            }}
          }}

          stage('Deploy to rctest') {{
            when {{
                expression {{
                  return {deploy_to_test} && readFile('artifacts/GERRIT_EVENT_TYPE') != 'patchset-created' && env.GERRIT_EVENT_TYPE != 'patchset-created'
                }}
            }}
            steps {{
                build(job: '{name}-container-{ubuntu_release}-{os_release}-deploy-rctest')
            }}
          }}
        }}
      }}


- job-template:
    name: '{name}-container-{ubuntu_release}-{os_release}-deploy-rctest'
    defaults: global
    project-type: pipeline
    sandbox: true

    git_credential: '2f00f9a5-00c3-42fe-82bf-cc787af1df8c'

    dsl: |
      def copyArtifactSelector = upstream()

      pipeline {{
        agent any
        stages {{
          stage("Get artifacts") {{
            steps {{
              script {{
                if (currentBuild.upstreamBuilds.size() == 0) {{
                  build = selectRun(
                    job: '{name}-container-{ubuntu_release}-{os_release}',
                    selector: status('SUCCESSFUL'),
                    filter: or([parameters("GERRIT_EVENT_TYPE=change-merged"), parameters("GERRIT_REFSPEC=refs/heads/nectar/{os_release}")]),
                    verbose: true
                  )
                  copyArtifactSelector = specific(build.getId())
                }}
                copyArtifacts(
                  projectName: '{name}-container-{ubuntu_release}-{os_release}',
                  selector: copyArtifactSelector,
                  fingerprintArtifacts: true,
                )
              }}
            }}
          }}
          stage("Update tag") {{
            environment {{
              IMAGE_TAG = readFile('artifacts/IMAGE_TAG').trim()
            }}
            steps {{
              git(
                changelog: false,
                credentialsId: '{git_credential}',
                poll: false,
                url: 'https://jenkins@review.rc.nectar.org.au/a/internal/puppet-site-rctest'
              )
              sh('''
                sed -i \"s/^profile::core::{name}::version: .*/profile::core::{name}::version: $IMAGE_TAG/g\" data/base.yaml
                git checkout -B master
                git config user.name 'Jenkins'
                git config user.email 'jenkins@rc.nectar.org.au'
                git add data/base.yaml && git commit -am "[Jenkins CI] {name}::version: $IMAGE_TAG"
              ''')
            }}
          }}
          stage("Push") {{
            environment {{
              GIT_AUTH = credentials('{git_credential}')
            }}
            steps {{
              sh('''
                  git show -q
                  git config --local credential.helper "!f() {{ echo username=\\$GIT_AUTH_USR; echo password=\\$GIT_AUTH_PSW; }}; f"
                  git push origin HEAD:refs/heads/master
                  git config --local --unset credential.helper
              ''')
            }}
          }}
        }}
        post {{
          success {{
            build (
              job: 'puppet-site-rctest-r10k-deploy-control-repo',
              parameters: [string(name: 'GERRIT_PROJECT', value: 'internal/puppet-site-rctest')]
            )
          }}
        }}
      }}
